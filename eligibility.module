<?php

/**
 * @file
 * Provides an eligibility api for Drupal.
 */


/**
 * Eligibility is early.
 */
define('ELIGIBILITY_IS_EARLY', 1);

/**
 * Eligibility is late.
 */
define('ELIGIBILITY_IS_LATE', 2);

/**
 * Eligibility in range.
 */
define('ELIGIBILITY_IS_ELIGIBLE', 3);

/**
 * Eligibility not in range.
 */
define('ELIGIBILITY_IS_NOT_ELIGIBLE', 4);

/**
 * Debug date format.
 */
define('ELIGIBILITY_DEBUG_DATE_FORMAT', 'd M Y H:i:s');

/**
 * Implements hook_permission().
 */
function eligibility_permission() {
  return array(
    'debug eligibility' => array(
      'title' => t('Debug Eligibility'),
      'description' => t('Allows users to view debug information about eligibility.'),
    ),
  );
}

/**
 * Load a restriction.
 *
 * @param $rid
 *   A Restriction ID.
 * @return
 *   A Restriction Object or FALSE
 */
function eligibility_restriction_load($rid) {
  $restrictions = &drupal_static(__FUNCTION__, array());

  if ( !isset($restrictions[$rid]) ) {
    $restriction = db_select('eligibility_restrictions', 'r')
      ->fields('r')
      ->condition('r.rid', $rid)
      ->execute()
      ->fetchObject();

    switch ( $restriction->type ) {
      case 'series':
        $restriction->data = db_select('eligibility_restrictions_series', 'rs')
          ->fields('rs')
          ->condition('rs.rid', $rid)
          ->orderBy('timestamp')
          ->execute()
          ->fetchAll();

        break;
      case 'interval':
        $restriction->data = db_select('eligibility_restrictions_interval', 'ri')
          ->fields('ri')
          ->condition('ri.rid', $rid)
          ->execute()
          ->fetchObject();
    }

    $restrictions[$rid] = $restriction;
  }

  return $restrictions[$rid];
}

/**
 * Load multiple restrictions.
 *
 * @param $param
 *   An array of conditions to match against the database query.
 * @return
 *   An array of Restriction Objects.
 */
function eligibility_restriction_load_multiple($param = array()) {
  $query = db_select('eligibility_restrictions', 'r')
    ->fields('r', array('rid'));

  foreach ( $param as $field => $value ) {
    if ( !is_null($value) ) {
      $query->condition($field, $value);
    }
  }

  $restrictions = array();
  $result = $query->execute();
  foreach ( $result as $restriction ) {
    $restrictions[] = userpoints_collect_restriction_load($restriction->rid);
  }

  return $restrictions;
}

/**
 * Save a restriction.
 *
 * @param $restriction
 *   A Restriction Object.
 */
function eligibility_restriction_save(&$restriction) {
  $restriction->is_new = empty($restriction->rid);

  if ( $restriction->is_new ) {
    $status = drupal_write_record('eligibility_restrictions', $restriction);
  }
  else {
    $status = drupal_write_record('eligibility_restrictions', $restriction, 'rid');
  }
}

/**
 * Clear all restrictions.
 */
function eligibility_clear_all() {
  db_truncate('eligibility_restrictions')->execute();
  db_truncate('eligibility_restrictions_interval')->execute();
  db_truncate('eligibility_restrictions_series')->execute();
  drupal_set_message(t('Cleared all eligibility restrictions'));
}

/**
 * Returns the eligibility for an account based on any restrictions.
 *
 * @param $account
 *   (optional) A User Object.
 * @param $tid
 *   (optional) A Category ID.
 * @param $timestamp
 *   (optional) A timestamp to check against, defaults to time().
 * @param $last_timestamp
 *   (optional) The last timestamp used during eligibility.
 * @return
 *   An Eligibility Object.
 */
function eligibility_get($account = NULL, $tid = NULL, $timestamp = NULL, $last_timestamp = NULL) {
  if ( is_null($account) ) {
    $account = $GLOBALS['user'];
  }

  if ( is_null($timestamp) ) {
    $timestamp = time();
  }

  if ( is_null($last_timestamp) ) {
    $last_timestamp = eligibility_last_timestamp($account, $tid);
  }

  $status = ELIGIBILITY_IS_ELIGIBLE;
  $restrictions = eligibility_restriction_load_multiple(array('status' => 1, 'tid' => $tid));
  if ( count($restrictions) > 0 ) {
    foreach ( $restrictions as $restriction ) {
      $function = 'eligibility_restriction_' . $restriction->type;
      if ( $status == ELIGIBILITY_IS_ELIGIBLE && function_exists($function) ) {
        $eligibility = $function($restriction, $timestamp, $last_timestamp);
        $status = $eligibility->status;
      }
    }
  }
  else {
    $eligibility = (object) array(
      'status' => ELIGIBILITY_IS_ELIGIBLE,
      'timestamp' => $timestamp,
      'last_timestamp' => $last_timestamp,
      'start' => 0,
      'end' => 0,
    );
  }

  // Calculate the time left until eligibility.
  if ( $eligibility->status == ELIGIBILITY_IS_NOT_ELIGIBLE && isset($eligibility->period_end) ) {
    $eligibility->next = $eligibility->period_end - $eligibility->timestamp;
  }
  elseif ( $eligibility->status == ELIGIBILITY_IS_EARLY ) {
    $eligibility->next = $eligibility->start - $eligibility->timestamp;
  }
  elseif ( $eligibility->status == ELIGIBILITY_IS_LATE ) {
    $eligibility->next = -1;
  }
  else {
    $eligibility->next = 0;
  }

  // Debug the eligibility object.
  eligibility_debug($eligibility);

  return $eligibility;
}

/**
 * Returns eligibility information for interval based time checking.
 *
 * @param $restriction
 *   A Restriction Object.
 * @param $timestamp
 *   A timestamp to check against.
 * @param $last_timestamp
 *   The last timestamp used during eligibility.
 */
function eligibility_restriction_interval($restriction, $timestamp, $last_timestamp) {
  $start = $restriction->data->start;
  $end = $restriction->data->end;
  $length = $restriction->data->length;

  if ( $timestamp < $start ) {
    return (object) array(
      'status' => ELIGIBILITY_IS_EARLY,
      'timestamp' => $timestamp,
      'start' => $start,
      'end' => $end,
    );
  }
  elseif ( $end != 0 && $timestamp >= $end ) {
    return (object) array(
      'status' => ELIGIBILITY_IS_LATE,
      'timestamp' => $timestamp,
      'start' => $start,
      'end' => $end,
    );
  }
  else {
    $num_intervals = ( $timestamp - $start ) / $length;

    // Intervals divides into timestamp evenly.
    if ( ( $timestamp - $start ) % $length == 0 ) {
      $period_start = $start + $num_intervals * $length;
      $period_end = $start + ( $num_intervals + 1 ) * $length;
    }
    // Intervals isn't a whole number calculate max and min values.
    else {
      $min_num_intervals = floor($num_intervals);
      $max_num_intervals = ceil($num_intervals);
      $period_start = $start + $min_num_intervals * $length;
      $period_end = $start + $max_num_intervals * $length;
    }

    if ( $timestamp >= $min && $timestamp < $max ) {
      if ( !$last_timestamp || $last_timestamp < $period_start ) {
        return (object) array(
          'status' => ELIGIBILITY_IS_ELIGIBLE,
          'timestamp' => $timestamp,
          'last_timestamp' => $last_timestamp,
          'start' => $start,
          'end' => $end,
          'period_start' => $period_start,
          'period_end' => $period_end,
        );
      }
    }
  }

  return (object) array(
    'status' => ELIGIBILITY_IS_NOT_ELIGIBLE,
    'timestamp' => $timestamp,
    'last_timestamp' => $last_timestamp,
    'start' => $start,
    'end' => $end,
    'period_start' => $period_start,
    'period_end' => $period_end,
  );
}